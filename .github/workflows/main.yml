name: HDB BTO System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test & Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 bandit safety

    - name: Run linting
      run: |
        echo "Running Black code formatter..."
        black --check --diff .
        echo "Running Flake8 linter..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run security checks
      run: |
        echo "Running Bandit security scanner..."
        bandit -r . -f json -o bandit-report.json || true
        echo "Running Safety vulnerability checker..."
        safety check --json --output safety-report.json || true

    - name: Run tests
      run: |
        echo "Running pytest with coverage..."
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-package
        path: dist/
        retention-days: 30

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: hdb-bto-system:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: |
          .dockerignore
          Dockerfile
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run system health check
      run: |
        echo "Performing system health check..."
        python -c "
        import sys
        sys.path.append('.')
        from api.main import app
        print('‚úÖ API app loaded successfully')
        "

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Staging deployment completed successfully!"
        # Add your staging deployment commands here
        # Example: docker-compose up -d

    - name: Health check staging
      run: |
        echo "üè• Performing health check on staging..."
        echo "‚úÖ Staging environment is healthy!"
        # Add actual health check commands
        # curl -f http://staging.example.com/api/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run full test suite
      run: |
        echo "üß™ Running comprehensive test suite..."
        pytest tests/ -v --cov=. --cov-report=xml

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Production deployment completed successfully!"
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/

    - name: Health check production
      run: |
        echo "üè• Performing health check on production..."
        echo "‚úÖ Production environment is healthy!"
        # Add actual health check commands
        # curl -f https://api.hdb-bto.com/api/health || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        echo "Release: ${{ github.event.release.tag_name }}"
        # Add notification commands (Slack, email, etc.)

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Release: ${{ github.event.release.tag_name }}"
        # Add notification commands (Slack, email, etc.)

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-package
        path: dist/

    - name: Publish to PyPI
      run: |
        echo "üì¶ Publishing to PyPI..."
        echo "Package will be published as: hdb-bto-system"
        # Uncomment when you have PyPI credentials
        # python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ All checks passed successfully!"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        # Add success notification (Slack, email, etc.)

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Some checks failed!"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        # Add failure notification (Slack, email, etc.)
